
/*
 * SWIFTRef API
 *
 * SWIFTRef API
 *
 * API version: 1.6.0
 * Contact: developer-support@swift.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swiftref

import (
	"context"
	"fmt"
	"github.com/antihax/optional"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type AccountNumbersApiService service
/*
AccountNumbersApiService Check validity of account number formats, including IBANs.
Check validity of account number formats, including IBANs, issued in almost any country in the world
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accountNumber Account number to validate
 * @param optional nil or *AccountNumbersApiGetAccountNumberValidityV2Opts - Optional Parameters:
     * @param "CountryCode" (optional.String) -  ISO 2-letter country code of the country where the account is held
     * @param "IsIban" (optional.String) -  Whether the account number must be handled as an IBAN
     * @param "Usage" (optional.String) -  How the account number is used (only for a few countries)
     * @param "NationalId" (optional.String) -  National ID (bank ID, clearing code, sort code, routing number) of the account holding institution
     * @param "Bic" (optional.String) -  BIC-8 or BIC-11 of the account holding institution
     * @param "APIStatus" (optional.String) -  Whether status item must always be returned within responses (by default, positive responses do not report status)
@return InlineResponse20021
*/

type AccountNumbersApiGetAccountNumberValidityV2Opts struct {
    CountryCode optional.String
    IsIban optional.String
    Usage optional.String
    NationalId optional.String
    Bic optional.String
    APIStatus optional.String
}

func (a *AccountNumbersApiService) GetAccountNumberValidityV2(ctx context.Context, accountNumber string, localVarOptionals *AccountNumbersApiGetAccountNumberValidityV2Opts) (InlineResponse20021, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20021
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v2/account_numbers/{account_number}/validity"
	localVarPath = strings.Replace(localVarPath, "{"+"account_number"+"}", fmt.Sprintf("%v", accountNumber), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CountryCode.IsSet() {
		localVarQueryParams.Add("country_code", parameterToString(localVarOptionals.CountryCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsIban.IsSet() {
		localVarQueryParams.Add("is_iban", parameterToString(localVarOptionals.IsIban.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Usage.IsSet() {
		localVarQueryParams.Add("usage", parameterToString(localVarOptionals.Usage.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NationalId.IsSet() {
		localVarQueryParams.Add("national_id", parameterToString(localVarOptionals.NationalId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Bic.IsSet() {
		localVarQueryParams.Add("bic", parameterToString(localVarOptionals.Bic.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.APIStatus.IsSet() {
		localVarHeaderParams["API-Status"] = parameterToString(localVarOptionals.APIStatus.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20021
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v WithStatus
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v WithStatus
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v WithStatus
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v WithStatus
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
