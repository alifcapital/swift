
/*
 * SWIFTRef API
 *
 * SWIFTRef API
 *
 * API version: 1.6.0
 * Contact: developer-support@swift.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swiftref

import (
	"context"
	"fmt"
	"github.com/antihax/optional"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type NationalIdsApiService service
/*
NationalIdsApiService Get BICs of a National ID.
For a given National ID, you can retrieve the BIC or the BICs of that National ID; you need to provide the National ID, and either a country code, or an indication to which scheme this National ID belongs
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param nationalId National ID (a synonym for clearing code, routing code, sort code, bank and branch ID) for which the corresponding BICs are requested
 * @param optional nil or *NationalIdsApiGetBicsFromNationalIdV2Opts - Optional Parameters:
     * @param "CountryCode" (optional.String) -  The 2-character ISO 3166-1 country code of the country that issued the National ID (mandatory, when scheme parameter is not provided)
     * @param "Scheme" (optional.String) -  The scheme (a synonym for the National ID type) under which the National ID is defined (mandatory, when country_code parameter is not provided)
     * @param "APIStatus" (optional.String) -  Whether status item must always be returned within responses (by default, positive responses do not report status)
@return InlineResponse20014
*/

type NationalIdsApiGetBicsFromNationalIdV2Opts struct {
    CountryCode optional.String
    Scheme optional.String
    APIStatus optional.String
}

func (a *NationalIdsApiService) GetBicsFromNationalIdV2(ctx context.Context, nationalId string, localVarOptionals *NationalIdsApiGetBicsFromNationalIdV2Opts) (InlineResponse20014, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20014
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v2/national_ids/{national_id}/bics"
	localVarPath = strings.Replace(localVarPath, "{"+"national_id"+"}", fmt.Sprintf("%v", nationalId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CountryCode.IsSet() {
		localVarQueryParams.Add("country_code", parameterToString(localVarOptionals.CountryCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Scheme.IsSet() {
		localVarQueryParams.Add("scheme", parameterToString(localVarOptionals.Scheme.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.APIStatus.IsSet() {
		localVarHeaderParams["API-Status"] = parameterToString(localVarOptionals.APIStatus.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20014
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v WithStatus
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v WithStatus
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v WithStatus
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v WithStatus
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
NationalIdsApiService Get details of a National ID.
For a given National ID, you can retrieve the details of that National ID, that is the bank name or business name, and the address. You must provide either a country code, or an indication to which scheme the National ID belongs.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param nationalId National ID (a synonym for clearing code, routing code, sort code, bank and branch ID) for which details are requested
 * @param optional nil or *NationalIdsApiGetNationalIdDetailsV2Opts - Optional Parameters:
     * @param "CountryCode" (optional.String) -  The 2-character ISO 3166-1 country code of the country that issued the National ID (mandatory, when scheme parameter is not provided)
     * @param "Scheme" (optional.String) -  The scheme (a synonym for the National ID type) under which the National ID is defined (mandatory, when country_code parameter is not provided)
     * @param "APIStatus" (optional.String) -  Whether status item must always be returned within responses (by default, positive responses do not report status)
     * @param "OnlyLocalLanguage" (optional.Bool) -  Whether fields must be returned in local language
@return InlineResponse20012
*/

type NationalIdsApiGetNationalIdDetailsV2Opts struct {
    CountryCode optional.String
    Scheme optional.String
    APIStatus optional.String
    OnlyLocalLanguage optional.Bool
}

func (a *NationalIdsApiService) GetNationalIdDetailsV2(ctx context.Context, nationalId string, localVarOptionals *NationalIdsApiGetNationalIdDetailsV2Opts) (InlineResponse20012, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20012
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v2/national_ids/{national_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"national_id"+"}", fmt.Sprintf("%v", nationalId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CountryCode.IsSet() {
		localVarQueryParams.Add("country_code", parameterToString(localVarOptionals.CountryCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Scheme.IsSet() {
		localVarQueryParams.Add("scheme", parameterToString(localVarOptionals.Scheme.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OnlyLocalLanguage.IsSet() {
		localVarQueryParams.Add("only_local_language", parameterToString(localVarOptionals.OnlyLocalLanguage.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.APIStatus.IsSet() {
		localVarHeaderParams["API-Status"] = parameterToString(localVarOptionals.APIStatus.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20012
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v WithStatus
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v WithStatus
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v WithStatus
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v WithStatus
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
NationalIdsApiService Check the Validity of a National ID.
With this API call, you can check whether a National ID format is correct and the value exists in SWIFT&#x27;s list of National IDs; you need to provide the National ID, and either a country code, or an indication to which scheme this National ID belongs; in addition to v1, v2 of the API provides a country-specific validation of the National ID&#x27;s format
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param nationalId National ID (a synonym for clearing code, routing code, sort code, bank and branch ID) to validate
 * @param optional nil or *NationalIdsApiGetNationalIdValidityV2Opts - Optional Parameters:
     * @param "CountryCode" (optional.String) -  The 2-character ISO 3166-1 country code of the country that issued the National ID (mandatory, when scheme parameter is not provided)
     * @param "Scheme" (optional.String) -  The scheme (a synonym for the National ID type) under which the National ID is defined (mandatory, when country_code parameter is not provided)
     * @param "APIStatus" (optional.String) -  Whether status item must always be returned within responses (by default, positive responses do not report status)
@return InlineResponse20013
*/

type NationalIdsApiGetNationalIdValidityV2Opts struct {
    CountryCode optional.String
    Scheme optional.String
    APIStatus optional.String
}

func (a *NationalIdsApiService) GetNationalIdValidityV2(ctx context.Context, nationalId string, localVarOptionals *NationalIdsApiGetNationalIdValidityV2Opts) (InlineResponse20013, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20013
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v2/national_ids/{national_id}/validity"
	localVarPath = strings.Replace(localVarPath, "{"+"national_id"+"}", fmt.Sprintf("%v", nationalId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CountryCode.IsSet() {
		localVarQueryParams.Add("country_code", parameterToString(localVarOptionals.CountryCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Scheme.IsSet() {
		localVarQueryParams.Add("scheme", parameterToString(localVarOptionals.Scheme.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.APIStatus.IsSet() {
		localVarHeaderParams["API-Status"] = parameterToString(localVarOptionals.APIStatus.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20013
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v WithStatus
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v WithStatus
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v WithStatus
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v WithStatus
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
